import argparse
import os
import re

import pandas as pd

DEFAULT_FILE = "flights.parquet"

df = pd.DataFrame(columns=["destination", "flight_number", "aircraft_type"])


def validate_flight(destination, flight_number, aircraft_type):
    if not destination.strip():
        print("‚ùå –û—à–∏–±–∫–∞: –ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return False

    flight_number = str(flight_number).strip()
    if not re.match(r"^\d+$", flight_number):
        print("‚ùå –û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä —Ä–µ–π—Å–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        return False

    if not aircraft_type.strip():
        print("‚ùå –û—à–∏–±–∫–∞: –¢–∏–ø —Å–∞–º–æ–ª–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return False

    return True


def add_flight(destination, flight_number, aircraft_type):
    global df

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(DEFAULT_FILE):
        try:
            df = pd.read_parquet(DEFAULT_FILE, engine="pyarrow").copy()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            df = pd.DataFrame(columns=["destination", "flight_number", "aircraft_type"])

    if not validate_flight(destination, flight_number, aircraft_type):
        return

    flight_number = str(flight_number).strip()
    new_data = pd.DataFrame([{
        "destination": destination.strip(),
        "flight_number": flight_number,
        "aircraft_type": aircraft_type.strip()
    }])
    df = pd.concat([df, new_data], ignore_index=True)

    print(f"‚úÖ –†–µ–π—Å {flight_number} –≤ {destination} –¥–æ–±–∞–≤–ª–µ–Ω.")
    save_to_parquet()


def save_to_parquet(file_name=DEFAULT_FILE):
    global df

    if df.empty:
        print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ä–µ–π—Å–æ–≤!")
    else:
        print("üìÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        df.to_parquet(file_name, engine="pyarrow")
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_name}")


def load_from_parquet(file_name=DEFAULT_FILE, destination=None):
    try:
        df_loaded = pd.read_parquet(file_name, engine="pyarrow").copy()

        if set(df_loaded.columns) != {"destination", "flight_number", "aircraft_type"}:
            print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ {file_name}.")
            return

        if destination:
            df_loaded = df_loaded[df_loaded["destination"] == destination]

        if not df_loaded.empty:
            print(df_loaded)
        else:
            print("‚ùå –†–µ–π—Å–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Parquet: {e}")


def show_flights():
    global df

    print("üìã –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Å—ã:")
    print(df if not df.empty else "‚ùå –°–ø–∏—Å–æ–∫ —Ä–µ–π—Å–æ–≤ –ø—É—Å—Ç.")


def main():
    global df

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if os.path.exists(DEFAULT_FILE):
        try:
            df = pd.read_parquet(DEFAULT_FILE, engine="pyarrow").copy()
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞–º–∏")
    subparsers = parser.add_subparsers(dest="command", help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É")

    parser_add = subparsers.add_parser("add", help="–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–π—Å")
    parser_add.add_argument("destination", type=str, help="–ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
    parser_add.add_argument("flight_number", type=str, help="–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞")
    parser_add.add_argument("aircraft_type", type=str, help="–¢–∏–ø —Å–∞–º–æ–ª–µ—Ç–∞")

    subparsers.add_parser("save", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

    parser_load = subparsers.add_parser("load", help="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ—Ä–æ–¥—É")
    parser_load.add_argument("destination", type=str, nargs="?", default=None,
                             help="–ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")

    subparsers.add_parser("show", help="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ–π—Å—ã")

    args = parser.parse_args()

    if args.command == "add":
        add_flight(args.destination, args.flight_number, args.aircraft_type)
    elif args.command == "save":
        save_to_parquet()
    elif args.command == "load":
        load_from_parquet(destination=args.destination)
    elif args.command == "show":
        show_flights()
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
